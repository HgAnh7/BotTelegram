import os
import logging
import re
import requests
from urllib.parse import quote, unquote
from bs4 import BeautifulSoup
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes

# C·∫•u h√¨nh logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Token bot Telegram - thay th·∫ø b·∫±ng token th·ª±c c·ªßa b·∫°n
BOT_TOKEN = os.getenv("TELEGRAM_TOKEN")

class SnapVideoDownloader:
    def __init__(self):
        self.base_url = "https://snapvideo.vn/"
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        })
    
    def is_valid_url(self, url):
        """Ki·ªÉm tra URL c√≥ h·ª£p l·ªá kh√¥ng"""
        url_patterns = [
            r'(?:https?://)?(?:www\.)?youtube\.com/watch\?v=[\w-]+',
            r'(?:https?://)?(?:www\.)?youtu\.be/[\w-]+',
            r'(?:https?://)?(?:www\.)?facebook\.com/.+',
            r'(?:https?://)?(?:www\.)?tiktok\.com/.+',
            r'(?:https?://)?(?:vm\.)?tiktok\.com/.+',
            r'(?:https?://)?(?:www\.)?instagram\.com/.+',
            r'(?:https?://)?(?:www\.)?twitter\.com/.+',
            r'(?:https?://)?(?:www\.)?x\.com/.+',
        ]
        
        for pattern in url_patterns:
            if re.match(pattern, url, re.IGNORECASE):
                return True
        return False
    
    def get_download_links(self, video_url):
        """L·∫•y link t·∫£i video v√† √¢m thanh t·ª´ SnapVideo"""
        try:
            # T·∫°o URL request ƒë·∫øn SnapVideo
            snapvideo_url = f"{self.base_url}#url={video_url}"
            
            # G·ª≠i request ƒë·ªÉ l·∫•y trang
            response = self.session.get(snapvideo_url)
            response.raise_for_status()
            
            # Parse HTML ƒë·ªÉ t√¨m link t·∫£i
            soup = BeautifulSoup(response.content, 'html.parser')
            
            # T√¨m t·∫•t c·∫£ c√°c link download
            download_links = soup.find_all('a', class_='btn btn-dark px-4 rounded-pill shadow-tad')
            
            video_link = None
            audio_link = None
            
            for link in download_links:
                href = link.get('href', '')
                if 'y-download.php' in href:  # Link video
                    video_link = href
                elif 'download/?id=' in href and 'itaga=140' in href:  # Link audio
                    audio_link = href
                    
            return {
                'video': video_link,
                'audio': audio_link,
                'title': self.extract_title(soup)
            }
            
        except Exception as e:
            logger.error(f"L·ªói khi l·∫•y link t·∫£i: {e}")
            return None
    
    def extract_title(self, soup):
        """Tr√≠ch xu·∫•t ti√™u ƒë·ªÅ video"""
        try:
            # T√¨m ti√™u ƒë·ªÅ trong c√°c th·∫ª c√≥ th·ªÉ c√≥
            title_selectors = [
                'title',
                '.video-title',
                'h1',
                'h2',
                '.title'
            ]
            
            for selector in title_selectors:
                element = soup.select_one(selector)
                if element and element.get_text().strip():
                    return element.get_text().strip()
                    
            return "Video kh√¥ng c√≥ ti√™u ƒë·ªÅ"
        except:
            return "Video kh√¥ng c√≥ ti√™u ƒë·ªÅ"

# Kh·ªüi t·∫°o downloader
downloader = SnapVideoDownloader()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """X·ª≠ l√Ω l·ªánh /start"""
    welcome_message = """
üé¨ **Ch√†o m·ª´ng ƒë·∫øn v·ªõi SnapVideo Bot!**

Bot n√†y gi√∫p b·∫°n t·∫£i video v√† √¢m thanh t·ª´ c√°c n·ªÅn t·∫£ng:
‚Ä¢ YouTube
‚Ä¢ Facebook  
‚Ä¢ TikTok
‚Ä¢ Instagram
‚Ä¢ Twitter/X

**C√°ch s·ª≠ d·ª•ng:**
1. G·ª≠i link video b·∫°n mu·ªën t·∫£i
2. Ch·ªçn ƒë·ªãnh d·∫°ng t·∫£i v·ªÅ (Video ho·∫∑c Audio)
3. Nh·∫≠n link t·∫£i tr·ª±c ti·∫øp

Ch·ªâ c·∫ßn g·ª≠i link video ƒë·ªÉ b·∫Øt ƒë·∫ßu! üöÄ
    """
    
    await update.message.reply_text(
        welcome_message,
        parse_mode='Markdown'
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """X·ª≠ l√Ω l·ªánh /help"""
    help_text = """
üìñ **H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:**

**C√°c n·ªÅn t·∫£ng ƒë∆∞·ª£c h·ªó tr·ª£:**
‚Ä¢ YouTube (youtube.com, youtu.be)
‚Ä¢ Facebook (facebook.com)
‚Ä¢ TikTok (tiktok.com, vm.tiktok.com)
‚Ä¢ Instagram (instagram.com)
‚Ä¢ Twitter/X (twitter.com, x.com)

**C√°ch s·ª≠ d·ª•ng:**
1. Copy link video t·ª´ n·ªÅn t·∫£ng b·∫•t k·ª≥
2. Paste link v√†o chat
3. Ch·ªçn t·∫£i Video ho·∫∑c Audio
4. Click v√†o link ƒë·ªÉ t·∫£i v·ªÅ

**L∆∞u √Ω:**
- Bot ch·ªâ h·ªó tr·ª£ t·∫£i video c√¥ng khai
- M·ªôt s·ªë video c√≥ th·ªÉ b·ªã h·∫°n ch·∫ø do b·∫£n quy·ªÅn
- Link t·∫£i c√≥ th·ªùi h·∫°n, h√£y t·∫£i ngay sau khi nh·∫≠n
    """
    
    await update.message.reply_text(
        help_text,
        parse_mode='Markdown'
    )

async def handle_url(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """X·ª≠ l√Ω URL ƒë∆∞·ª£c g·ª≠i"""
    url = update.message.text.strip()
    
    # Ki·ªÉm tra URL h·ª£p l·ªá
    if not downloader.is_valid_url(url):
        await update.message.reply_text(
            "‚ùå Link kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£!\n\n"
            "Vui l√≤ng g·ª≠i link t·ª´:\n"
            "‚Ä¢ YouTube\n‚Ä¢ Facebook\n‚Ä¢ TikTok\n‚Ä¢ Instagram\n‚Ä¢ Twitter/X"
        )
        return
    
    # G·ª≠i th√¥ng b√°o ƒëang x·ª≠ l√Ω
    processing_msg = await update.message.reply_text("üîÑ ƒêang x·ª≠ l√Ω link...")
    
    try:
        # L·∫•y link t·∫£i
        result = downloader.get_download_links(url)
        
        if not result:
            await processing_msg.edit_text("‚ùå Kh√¥ng th·ªÉ x·ª≠ l√Ω link n√†y. Vui l√≤ng th·ª≠ l·∫°i!")
            return
        
        # T·∫°o keyboard v·ªõi c√°c t√πy ch·ªçn t·∫£i
        keyboard = []
        
        if result['video']:
            keyboard.append([
                InlineKeyboardButton("üìπ T·∫£i Video", url=result['video'])
            ])
        
        if result['audio']:
            keyboard.append([
                InlineKeyboardButton("üéµ T·∫£i Audio", url=result['audio'])
            ])
        
        if not keyboard:
            await processing_msg.edit_text("‚ùå Kh√¥ng t√¨m th·∫•y link t·∫£i cho video n√†y!")
            return
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # T·∫°o th√¥ng b√°o k·∫øt qu·∫£
        message_text = f"‚úÖ **X·ª≠ l√Ω th√†nh c√¥ng!**\n\n"
        message_text += f"üìù **Ti√™u ƒë·ªÅ:** {result['title']}\n\n"
        message_text += "üëá **Ch·ªçn ƒë·ªãnh d·∫°ng t·∫£i:**"
        
        await processing_msg.edit_text(
            message_text,
            parse_mode='Markdown',
            reply_markup=reply_markup,
            disable_web_page_preview=True
        )
        
    except Exception as e:
        logger.error(f"L·ªói x·ª≠ l√Ω URL: {e}")
        await processing_msg.edit_text(
            "‚ùå C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω link.\n"
            "Vui l√≤ng th·ª≠ l·∫°i sau!"
        )

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """X·ª≠ l√Ω tin nh·∫Øn text th√¥ng th∆∞·ªùng"""
    text = update.message.text
    
    # Ki·ªÉm tra xem c√≥ ch·ª©a URL kh√¥ng
    url_pattern = r'https?://[^\s]+'
    urls = re.findall(url_pattern, text)
    
    if urls:
        # N·∫øu c√≥ URL, x·ª≠ l√Ω URL ƒë·∫ßu ti√™n
        context.args = [urls[0]]
        await handle_url(update, context)
    else:
        # N·∫øu kh√¥ng c√≥ URL, g·ª≠i h∆∞·ªõng d·∫´n
        await update.message.reply_text(
            "üëã Xin ch√†o! ƒê·ªÉ t·∫£i video, h√£y g·ª≠i link t·ª´:\n\n"
            "‚Ä¢ YouTube\n‚Ä¢ Facebook\n‚Ä¢ TikTok\n‚Ä¢ Instagram\n‚Ä¢ Twitter/X\n\n"
            "Ho·∫∑c g√µ /help ƒë·ªÉ xem h∆∞·ªõng d·∫´n chi ti·∫øt."
        )

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """X·ª≠ l√Ω l·ªói"""
    logger.error(f"Update {update} caused error {context.error}")
    
    if update and update.message:
        await update.message.reply_text(
            "‚ùå C√≥ l·ªói x·∫£y ra! Vui l√≤ng th·ª≠ l·∫°i sau."
        )

def main():
    """Kh·ªüi ch·∫°y bot"""
    # T·∫°o Application
    application = Application.builder().token(BOT_TOKEN).build()
    
    # Th√™m handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    
    # Handler cho URL v√† text
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    
    # Error handler
    application.add_error_handler(error_handler)
    
    # Ch·∫°y bot
    print("ü§ñ Bot ƒëang ch·∫°y...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
